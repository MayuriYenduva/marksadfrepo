{
	"name": "ErrorRows_new",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesD2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "junktable",
						"type": "DatasetReference"
					},
					"name": "WriteToDatabase"
				},
				{
					"dataset": {
						"referenceName": "folderout",
						"type": "DatasetReference"
					},
					"name": "LogBadRows"
				}
			],
			"transformations": [
				{
					"name": "TypeCast"
				},
				{
					"name": "ErrorRows"
				}
			],
			"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\tRottenTomato as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 derive(movie = toInteger(movie)) ~> TypeCast\nTypeCast split(length(title) <= 5,\n\tdisjoint: false) ~> ErrorRows@(GoodRows, BadRows)\nErrorRows@GoodRows sink(input(\n\t\tid as integer,\n\t\tgenres as string,\n\t\tname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tname = title,\n\t\tid = movie\n\t),\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteToDatabase\nErrorRows@BadRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['badrows.csv'],\n\tpartitionBy('hash', 1)) ~> LogBadRows"
		}
	}
}