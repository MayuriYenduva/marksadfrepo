{
	"name": "map",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesD2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Select1"
				}
			],
			"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\tRottenTomato as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 derive(mymap = map(columnNames(),upper(#item)),\n\t\tmyindex = mapIndex(columnNames(),#index),\n\t\tmyreduce = reduce(array(toString(columns())), 'stringarray:', #acc + #item, #result),\n\t\tmysort = sort(map(columnNames(),lower(#item)), compare(#item1, #item2)),\n\t\tmyslice = slice(array(toString(columns())),:sizeOfColumnsArray-2),\n\t\tmyfind = find(columnNames(),left(toString(#item),1)=='R'),\n\t\tmyfilter = filter(columnNames(),left(toString(#item),1)=='R'),\n\t\tsizeOfColumnsArray := size(array(toString(columns())))) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tmymap,\n\t\tmyindex,\n\t\tmyreduce,\n\t\tmysort,\n\t\tmyslice,\n\t\tmyfind,\n\t\tmyfilter = myfilter\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1"
		}
	}
}